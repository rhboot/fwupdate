include $(TOP)/Make.version
ifneq ($(origin RELEASE),undefined)
DASHRELEASE    ?= -$(RELEASE)
else
DASHRELEASE    ?=
endif

NAME		= fwupdate
COMMIT_ID	= $(shell git log -1 --pretty=%H 2>/dev/null || echo master)
INSTALL		?= install
MAKE		?= make
PKG_CONFIG	?= $(CROSS_COMPILE)pkg-config
CC		= $(CROSS_COMPILE)gcc
LD		= $(CROSS_COMPILE)ld
OBJCOPY		= $(CROSS_COMPILE)objcopy
READELF		= eu-readelf
XGETTEXT	= xgettext
ABIDIFF		:= abidiff
ABIDW		:= abidw
prefix		?= /usr/
prefix		:= $(abspath $(prefix))
exec_prefix		?= $(prefix)
ARCH		= $(shell $(CC) -dumpmachine | cut -f1 -d- | sed s,i[3456789]86,ia32,)
ifeq ($(ARCH),x86_64)
  LIBDIR	?= $(exec_prefix)/lib64
  ifeq "$(wildcard $(LIBDIR) )" ""
    LIBDIR	= $(exec_prefix)/lib/x86_64-linux-gnu
  endif
endif
ifeq ($(ARCH),ia32)
  LIBDIR	?= $(exec_prefix)/lib
endif
ifeq ($(ARCH),aarch64)
  LIBDIR	?= $(exec_prefix)/lib64
endif
ifeq ($(ARCH),arm)
  LIBDIR	?= $(exec_prefix)/lib
endif
LIBDIR		?= unknown
ifeq ($(LIBDIR),unknown)
$(error Architecture $(ARCH) is not a supported build target.)
endif
ifneq ($(origin RPMARCH),undefined)
DOTARCH		?= .$(shell $(CC) -dumpmachine | cut -f1 -d- | sed s,i[3456789]86,i686,)
else
DOTARCH		?= .$(RPMARCH)
endif

GNUEFIDIR	?= $(LIBDIR)/gnuefi
ifeq "$(wildcard $(GNUEFIDIR) )" ""
	GNUEFIDIR = $(prefix)/lib
endif
libdir		?= $(LIBDIR)
pcdir		?= $(libdir)/pkgconfig
mandir		?= $(prefix)/share/man
includedir	?= $(prefix)/include
bindir		?= $(exec_prefix)/bin
datadir		?= $(prefix)/share
localedir	?= $(datadir)/locale
libexecdir	?= $(exec_prefix)/libexec
ifeq "$(wildcard $(libexecdir) )" ""
	libexecdir = $(exec_prefix)/lib
endif
libdatadir	?= $(exec_prefix)/lib
sharedstatedir	?= /var/lib

EFIDIR		?= $(shell x=$$(which --skip-alias --skip-functions git 2>/dev/null) ; [ -n "$$x" ] && git config --get fwupdate.efidir)
ifeq ($(EFIDIR),)
	EFIDIR_ERROR = $(error EFIDIR or .gitconfig fwupdate.efidir must be set to this distro's reserved EFI System Partition subdirectory name)
endif
ESPMOUNTPOINT	?= $(shell x=$$(which --skip-alias --skip-functions git 2>/dev/null) ; [ -n "$$x" ] && git config --get fwupdate.espmountdir)
ifeq ($(ESPMOUNTPOINT),)
	ESPMOUNTPOINT = "/boot/efi"
endif

DEBUGINFO	?= $(exec_prefix)/lib/debug
DEBUGSOURCE	?= $(prefix)/src/debug
TARGETDIR	?= $(ESPMOUNTPOINT)/EFI/$(EFIDIR)

.PHONY: check_efidir_error
check_efidir_error : ; $(EFIDIR_ERROR) $(info Building with EFIDIR as $(EFIDIR))
